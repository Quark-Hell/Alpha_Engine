#Use this file for configure game folder

#include("CMakeColorsOutput.txt")
#include("CMakeVariables.txt")

function(copy_headers src dest)
	message("${Red}copy headers${ColourReset}")
	file(GLOB_RECURSE templateFiles RELATIVE ${src} "${src}/*.h")
	foreach(templateFile ${templateFiles})
		set(copy_src "${src}/${templateFile}")
		set(copy_dest "${dest}/${templateFile}")

		message("${Cyan}copy header${ColourReset} ${copy_src} to\n ${copy_dest}")

		add_custom_command(TARGET ALPHA_Engine POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E copy_if_different
		${copy_src}
		${copy_dest}
		)
	endforeach(templateFile)

	file(GLOB_RECURSE templateFiles RELATIVE ${src} "${src}/*.hpp")
	foreach(templateFile ${templateFiles})
		set(copy_src "${src}/${templateFile}")
		set(copy_dest "${dest}/${templateFile}")

		message("${Cyan}copy header${ColourReset} ${copy_src} to\n ${copy_dest}")

		add_custom_command(TARGET ALPHA_Engine POST_BUILD
				COMMAND ${CMAKE_COMMAND} -E copy_if_different
				${copy_src}
				${copy_dest}
		)
	endforeach(templateFile)
endfunction()

copy_headers(${Engine_Source} ${Game_Engine_Dest}/headers)
copy_headers(${assimp} "${Game_Engine_Dest}/assimp")

function(copy_assets src dest)
	message("\n${Red}copy assets${ColourReset}")
	file(GLOB_RECURSE templateFiles RELATIVE ${src} "${src}/*")
	foreach(templateFile ${templateFiles})
		set(copy_src "${src}/${templateFile}")
		set(copy_dest "${dest}/${templateFile}")	

		message("${Cyan}copy asset${ColourReset} ${copy_src} to\n ${copy_dest}")

		add_custom_command(TARGET ALPHA_Engine POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E copy_if_different
		${copy_src}
		${copy_dest}
		)
	endforeach(templateFile)
endfunction()

copy_assets(${Engine_Assets} "${Game_Engine_Dest}/Engine_Assets")
copy_assets(${Build_Files} "${Game_Source_Dest}")
copy_assets(${GLM} "${Game_Engine_Dest}/GLM")
copy_assets(${GLEW} "${Game_Engine_Dest}/GLEW")
copy_assets("${Game_Source_Dest}/IncludedModules.cmake" "${Game_Source_Dest}")

message("\n")

if(WIN32)
#Stupid method, but it's working
add_custom_command(TARGET ALPHA_Engine POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy
	"${GLFW}/glfw3dll.lib"
	"${Game_Engine_Dest}/lib/glfw3dll.lib"

	COMMAND ${CMAKE_COMMAND} -E copy
	"${GLFW}/glfw3.dll"
	"${Game_Engine_Dest}/lib/glfw3.dll"

	COMMAND ${CMAKE_COMMAND} -E copy
	"${GLEW}/lib/Windows/glew32s.lib"
	"${Game_Engine_Dest}/lib/glew32s.lib"

	COMMAND ${CMAKE_COMMAND} -E copy
	"${assimp}/lib/assimp-vc143-mt.dll"
	"${Game_Engine_Dest}/lib/assimp-vc143-mt.dll"

	COMMAND ${CMAKE_COMMAND} -E copy
	"${assimp}/lib/assimp-vc143-mt.lib"
	"${Game_Engine_Dest}/lib/assimp-vc143-mt.lib"
)
else()
add_custom_command(TARGET ALPHA_Engine POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy
	"${GLFW}/glfw3.a"
	"${Game_Engine_Dest}/lib/glfw3.a"

	COMMAND ${CMAKE_COMMAND} -E copy
	"${assimp}/lib/libassimp.so.5.4.3"
	"${Game_Engine_Dest}/lib/libassimp.so.5"
)
endif()

add_custom_command(TARGET ALPHA_Engine POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy
	${Game_Source_Dest}/CMakeLists.txt
	${Game_Files_Dest}/CMakeLists.txt

	COMMAND ${CMAKE_COMMAND} -E remove
	${Game_Source_Dest}/CMakeLists.txt
)

#Export build config for sandbox
function(ExportModulesConfig ModuleName)
	set(ExportModule
			"add_compile_definitions(${ModuleName})\n"
	)

	file(APPEND "${Game_Source_Dest}/IncludedModules.cmake"
			${ExportModule}
	)
endfunction()

file(WRITE "${Game_Source_Dest}/IncludedModules.cmake" "")

if(RENDER_BASE)
ExportModulesConfig("RENDER_INCLUDED")
endif()

if(RENDER_ANOMALY_ENGINE)
ExportModulesConfig("ANOMALY_ENGINE_INCLUDED")
endif()

if(USER_SCRIPTS_REGISTER)
ExportModulesConfig("USER_SCRIPTS_REGISTER_INCLUDED")
endif()